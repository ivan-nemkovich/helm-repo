---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: {{ include "first-app.fullname" . }}
# spec:
#   {{- if not .Values.autoscaling.enabled }}
#   replicas: {{ .Values.replicaCount }}
#   {{- end }}
#   selector:
#     matchLabels:
#       app: {{ .Chart.Name }}
#   template:
#     metadata:
#       labels:
#         app: {{ .Chart.Name }}
#     spec:
#       containers:
#         - name: {{ .Chart.Name }}
#           image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
#           imagePullPolicy: {{ .Values.image.pullPolicy }}
#           env:
#             - name: JAVA_OPTS
#               value: "-Djenkins.install.runSetupWizard=false"
#             - name: CASC_JENKINS_CONFIG
#               value: /var/jenkins_home/casc_configs/jenkins.yaml
#           ports:
#             - name: http-port
#               containerPort: 8080
#             - name: jnlp-port
#               containerPort: 50000
#           securityContext:
#             runAsUser: 0
#           resources:
#             {{- toYaml .Values.resources | nindent 12 }}
#           volumeMounts:
#             {{- toYaml .Values.volumeMounts | nindent 12 }}
#       volumes:
#         {{- toYaml .Values.volumes | nindent 8 }}
---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: basic-security
#   namespace: ci-cd
# data:
#   basic-security.groovy: |
#     #!groovy
#     import jenkins.model.*
#     import hudson.security.*
#     def instance = Jenkins.getInstance()
#     println "--> creating local user 'admin'"
#     def password = System.getenv("PASS")
#     def hudsonRealm = new HudsonPrivateSecurityRealm(false)
#     hudsonRealm.createAccount('admin',"admin")
#     instance.setSecurityRealm(hudsonRealm)
#     def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
#     strategy.setAllowAnonymousRead(true)
#     instance.setAuthorizationStrategy(strategy)
#     instance.save()
---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: jenkins-config
#   namespace: ci-cd
# data:
#   jenkins.yaml: |
#         jenkins:
#           numExecutors: 2
#           clouds:
#           - kubernetes:
#               containerCapStr: "10"
#               maxRequestsPerHostStr: "32"
#               jenkinsUrl: "http://jenkins:8080"
#               name: "kubernetes"
#               namespace: "ci-cd"
#               skipTlsVerify: true
#         credentials:
#           system:
#             domainCredentials:
#             - credentials:
#               - usernamePassword:
#                   description: "Githubuser"
#                   id: "some_randome"
#                   password: "XXXXXXXXXXX"
#                   scope: GLOBAL
#                   username: "git_hub_user"
#         unclassified:
#           location:
#             adminAddress: "inemkovich@gmail.com"
#             url: "http://jenkins.k8s-35.sa/"
#           shell:
#             shell: "/bin/bash"
---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRoleBinding
# metadata:
#   name: jenkins
#   namespace: ci-cd
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: ClusterRole
#   name: cluster-admin
# subjects:
# - kind: ServiceAccount
#   name: default
#   namespace: ci-cd
---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: ingress-jenkins
#   namespace: ci-cd
#   annotations:
#     kubernetes.io/ingress.class: nginx
#     nginx.ingress.kubernetes.io/server-alias: "jenkins.k8s-36.sa"
# spec:
#   rules:
#     - host: jenkins.k8s-35.sa
#       http:
#         paths:
#           - path: /
#             pathType: Prefix
#             backend:
#               service:
#                 name: jenkins
#                 port:
#                   number: 8080
---
# apiVersion: v1
# kind: Service
# metadata:
#   name: jenkins
#   namespace: ci-cd
# spec:
#   ports:
#     - name: master
#       port: 8080
#       targetPort: 8080
#     - name: slave
#       port: 50000
#       targetPort: 50000
#   selector:
#     app: jenkins